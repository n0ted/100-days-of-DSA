'''yaml 
Problem Statement: Given an integer N , write program to count number of digits in N.

Examples:

Example 1:
Input: N = 12345
Output: 5
Explanation: N has 5 digits

Example 2:
Input: N = 8394
Output: 4
Explanation: N has 4 digits
'''
-------------------------------------------------------------------------------------

def count(n):
    count=0
    while (n>0):
        n=n//10
        count+=1
        
    print(count)
n=int(input('ENTER THE NO U WANT TO COUNT: '))
count(n)

Output:
ENTER THE NO U WANT TO COUNT: 888349
6

Time Complexity: O (n) where n is the number of digits in the given integer

Space Complexity: O(1)

*************************************************************************************

Reverse a number in C.

Problem Statement: Given a number N reverse the number and print it.

Examples:

Example 1:
Input: N = 123
Output: 321
Explanation: The reverse of 123 is 321

Example 2:
Input: N = 234
Output: 432
Explanation: The reverse of 234 is 432
-------------------------------------------------------------------------------------

For anyone wondering what is "[::-1]", it is used to reverse the string.
string[start: end: step]
for 64 bit format

def reverse(self, x: int) -> int:
        rev_dig=0
        if x<0:
            sign = -1
            x=-x
        else:
            sign = 1


        while (x>0):

            last_dig=x%10
            rev_dig=(rev_dig*10)+last_dig
            x=x//10
        return(rev_dig*sign)
        
        
for 32 bit


class Solution:
    def reverse(self, x: int) -> int:
        rev_dig=0
        if x<0:
            sign = -1
            x=-x
        else:
            sign = 1


        while (x>0):

            last_dig=x%10
            rev_dig=(rev_dig*10)+last_dig
            x=x//10
        
        if rev_dig * sign >= -2147483648 and rev_dig * sign <= 2147483647:
            return rev_dig * sign
        else:
            return 0
            
**************************************************************************************

Check if a number is Palindrome or Not
Problem Statement:  Given a number check if it is a palindrome.

An integer is considered a palindrome when it reads the same backward as forward.

Examples:

Example 1:
Input: N = 123
Output: Not Palindrome Number
Explanation: 123 read backwards is 321.Since these are two different numbers 123 is not a palindrome.

Example 2:
Input: N =  121 
Output: Palindrome Number
Explanation: 121 read backwards as 121.Since these are two same numbers 121 is a palindrome.

-------------------------------------------------------------------------------------
class Solution:
    def isPalindrome(self, x: int) -> bool:
        num=0
        user_int=x
        if x<0:
            return False
        while (x>0):
            last_dig=x%10
            x=x//10
            num=(num*10)+last_dig #alternate  way =[::-1]
        return num==user_int
        
**************************************************************************************

Problem Statement: Given a number, check if it is Armstrong Number or Not.

Examples:

Example 1:
Input:153 
Output: Yes, it is an Armstrong Number
Explanation: 1^3 + 5^3 + 3^3 = 153

Input:170 
Output: No, it is not an Armstrong Number
Explanation: 1^3 + 7^3 + 0^3 != 170

-------------------------------------------------------------------------------------


def armstrong(n):
    summ = 0
    temp = n
    count = 0
    total=len(str(n))
    while n>0:
        l_d = n % 10
        n = n // 10
        
        summ = summ+pow(l_d,total)
    if summ == temp:
        print("YES")
        
    else:
        print("NO")
n = int(input('enter the number '))
armstrong(n)

**************************************************************************************


Problem Statement: Given a number, print all the divisors of the number. A divisor is a number that gives remainder as zero when divided.

Examples:

Example 1:
Input: n = 36
Output: 1 2 3 4 6 9 12 18 36
Explanation: All the divisors of 36 are printed.

Example 2:
Input: n = 97
Output: 1 97
Explanation: Since 97 is a prime number, only 1 and 97 are printed.


-------------------------------------------------------------------------------------


def div(n):
    for i in range(1,n):
        for j in range(1):
            if user%i==0:
                print(i,end=' ')
    print('',n)
n=int(input('ENTER THE NO: '))
user = n
div(n)

**************************************************************************************

Problem Statement: Given a number, check whether it is prime or not. A prime number is a natural number that is only divisible by 1 and by itself.

Examples 1 2 3 5 7 11 13 17 19 â€¦

Examples:

Example 1:
Input: N = 3
Output: Prime
Explanation: 3 is a prime number

Example 2:
Input: N = 26
Output: Non-Prime
Explanation: 26 is not prime

-------------------------------------------------------------------------------------

def prime(n):
    for i in range(2,n):
        if n%i==0:
            print('not prime')
            break
    else:
        print("prime")
n=int(input('enter the number'))
prime(n)

sqrt(n) method linked here https://youtu.be/1xNbjMdbjug?t=2694


**************************************************************************************

Problem Statement: Find gcd of two numbers.

Examples:

Example 1:
Input: num1 = 4, num2 = 8
Output: 4
Explanation: Since 4 is the greatest number which divides both num1 and num2.

Example 2:
Input: num1 = 3, num2 = 6
Output: 3
Explanation: Since 3 is the greatest number which divides both num1 and num2.


-------------------------------------------------------------------------------------

def gcd(n1,n2):
    gcd_count = 1
    mini=min(n1,n2)
    for i in range(1,mini):
        if n1%i==0 and n2%i==0:
            gcd_count = i
    print(gcd_count)

n1=int(input('enter n1 '))
n2=int(input('enter n2 ' ))
gcd(n1,n2)

BRUTE FORCE

-------------------------------------------------------------------------------------

def gcd(n,m):
    while (n>0 and m>0):
        if n>m:
            n=n%m
        else:
            m=m%n
    if n==0:
        print(m)
    else:
        print(n)
n,m=map(int,input('enter the 2 number').split())
gcd(n,m)


using eucledian algo 
gcd=[a,b]=gcd[a-b,a>b]







        






         



            

    
        
        
        
        
        
        
        
        
   



