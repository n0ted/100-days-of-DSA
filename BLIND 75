238. Product of Array Except Self
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        ans = [1] * len(nums)
        pre = 1
        for i in range(len(nums)):
            ans[i] = pre
            pre *= nums[i]
        post = 1
        for i in range(len(nums)-1,-1,-1):
            ans[i] *= post
            post *= nums[i]
        return ans




152. Maximum Product Subarray
(IMPORTANT REVIST)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        

        size = len(nums)
        

        current_sum = 0
        max_till_now = nums[0]
         
        for i in range(0,size):
            current_sum = current_sum + nums[i]
            

            if (max_till_now < current_sum ):
                max_till_now = current_sum
            if (current_sum <=0):
                current_sum = 0
                

        return max_till_now  



33. Search in Rotated Sorted Array
(IMPORTANT REVISIT)

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        l , r = 0 , len(nums)-1
        
        while l <= r:
            m = (l + r) // 2
            if target == nums[m]:
                return m

            #check if we are in left sorted array
            if nums[l]<= nums[m]:
                if target > nums[m] or target < nums[l]:
                    l = m + 1
                else:
                    r = m - 1
            # right sorted portion of array
            else: 
                if target < nums[m] or target > nums[r]:
                    r = m - 1
                else:
                    l = m + 1
        return -1


                

15. 3Sum
(IMPORTANT REVISIT)
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:
                continue
            l , r = i + 1 , len(nums)-1
            while l < r:
                count = a + nums[l] + nums[r]
                if count > 0:
                    r -= 1
                elif count < 0:
                    l += 1
                else:
                    res.append([a,nums[l],nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r:
                        l += 1

        return res   
            

            

       
