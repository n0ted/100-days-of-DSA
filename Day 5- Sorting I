All the below algos take O(N^2)


Selection Sort 
select the minimum from the array and then swap it with the initial position then reduce the array to i+1

def sort(nums):
    size = len(nums)
    for i in range(size-1):
        mini = i
        for j in range(i,size):
            if nums[j]<nums[mini]:
                mini = j
        
        temp = nums[i]
        nums[i]=nums[mini]
        nums[mini] = temp
    
nums = [7,9,8,4,1,3]
sort(nums)
print(nums)

def selectionSort(arr):
    size = len(arr)
    for i in range(size-1):
        mini = i
        for j in range(i,size):
            if arr[mini] > arr[j]:
                arr[mini],arr[j] = arr[j],arr[mini]





arr = [4,2,5,6,12,7]
selectionSort(arr)
print(arr)

________________________________________________________________________________________________________________

Bubble Sort
Opposite to Selection Sort pushes the maximum to the end by adjacent swaping

def sort(nums):
    size = len(nums)
    for i in range(size-1,0,-1):
        for j in range(i):
            if nums[j]>nums[j+1]:
        
                temp = nums[j]
                nums[j]=nums[j+1]
                nums[j+1] = temp
            
            

    
nums = [7,9,8,4,1,3]
sort(nums)
print(nums)


Insertion Sort
Takes an element and places it in its correct position


 def sort(nums):
    size = len(nums)
    for i in range(1,size):
        j=i
        while nums[j-1]>nums[j] and j>0:
            nums[j-1],nums[j] = nums[j],nums[j-1]
            j-=1
                
        
nums = [2,6,5,1,3,4]
sort(nums)
print(nums)




